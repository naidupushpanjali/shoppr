{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ImageComponent","React","lazy","List","useState","listItems","setListItems","isFetching","setIsFetching","page_no","setPageno","data","setData","useEffect","fetchData","a","setTimeout","fetch","result","json","instagram_post_details","length","className","columnsCountBreakPoints","350","750","900","columnsCount","gutter","map","listItem","fallback","Skeleton","animation","src","post_meta","social_post_image","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","App","document","getElementById"],"mappings":"kPAIMA,EAAiBC,IAAMC,MAAK,kBAAM,gCAuEzBC,EArEF,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACXC,EADW,KACAC,EADA,OAEkBF,oBAAS,GAF3B,mBAEXG,EAFW,KAECC,EAFD,OAGWJ,mBAAS,GAHpB,mBAGXK,EAHW,KAGFC,EAHE,OAIMN,oBAAS,GAJf,mBAIXO,EAJW,KAILC,EAJK,KAOlBC,qBAAU,WACLF,GACHG,MAEC,CAACT,IAEJ,IAAMS,EAAS,uCAAG,sBAAAC,EAAA,sDACjBC,WAAU,sBAAC,8BAAAD,EAAA,sEACWE,MAAM,8EAAD,OACqDR,EADrD,iBADhB,cACJS,EADI,gBAISA,EAAOC,OAJhB,OAIJR,EAJI,OAKVD,EAAUD,EAAU,GAEhBE,EAAKS,uBAAuBC,OAAS,GACxCT,GAAQ,GACRN,GAAa,WACZ,MAAM,GAAN,mBAAWD,GAAX,YAAyBM,EAAKS,4BAE/BZ,GAAc,KAEdI,GAAQ,GACRJ,GAAc,IAfL,2CAiBR,KAlBc,2CAAH,qDAqBfK,qBAAU,cAGP,CAACN,IAOJ,OACC,qBAAKe,UAAU,YAAf,SACC,qBAAKA,UAAU,MAAf,SACC,sBAAKA,UAAU,YAAf,UACC,cAAC,oBAAD,CACCC,wBAAyB,CAAEC,IAAK,EAAGC,IAAK,EAAGC,IAAK,GADjD,SAGC,cAAC,IAAD,CAASC,aAAc,EAAGC,OAAO,OAAjC,SACEvB,EAAUwB,KAAI,SAACC,GAAD,OACd,cAAC,WAAD,CAECC,SAAU,cAACC,EAAA,EAAD,CAAUC,UAAU,SAF/B,SAIC,cAACjC,EAAD,CAAgBkC,IAAKJ,EAASK,UAAUC,qBAHnCN,EAASO,WAQjB9B,GAAc,mDCxDL+B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OAAO,cAACC,EAAD,IAASC,SAASC,eAAe,SAKjDb,M","file":"static/js/main.ef29675a.chunk.js","sourcesContent":["import Skeleton from \"@material-ui/lab/Skeleton\";\nimport React, { useState, useEffect, Suspense } from \"react\";\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\n\nconst ImageComponent = React.lazy(() => import(\"./ImageComponent\"));\n\nconst List = () => {\n\tconst [listItems, setListItems] = useState([]);\n\tconst [isFetching, setIsFetching] = useState(true);\n\tconst [page_no, setPageno] = useState(1);\n\tconst [data, setData] = useState(true);\n\tlet fetching = false;\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tfetchData();\n\t\t}\n\t}, [listItems]);\n\n\tconst fetchData = async () => {\n\t\tsetTimeout(async () => {\n\t\t\tconst result = await fetch(\n\t\t\t\t`https://beingfoxy.publshr.io/wp-json/shoppr/v1/get_instagram_posts?page_no=${page_no}&per_page=10`\n\t\t\t);\n\t\t\tconst data = await result.json();\n\t\t\tsetPageno(page_no + 1);\n\t\t\t// debugger;\n\t\t\tif (data.instagram_post_details.length > 0) {\n\t\t\t\tsetData(true);\n\t\t\t\tsetListItems(() => {\n\t\t\t\t\treturn [...listItems, ...data.instagram_post_details];\n\t\t\t\t});\n\t\t\t\tsetIsFetching(true);\n\t\t\t} else {\n\t\t\t\tsetData(false);\n\t\t\t\tsetIsFetching(false);\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!fetching) return;\n\t\tfetchMoreListItems();\n\t}, [isFetching]);\n\n\tconst fetchMoreListItems = () => {\n\t\tfetchData();\n\t\tsetIsFetching(true);\n\t};\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-sm-12\">\n\t\t\t\t\t<ResponsiveMasonry\n\t\t\t\t\t\tcolumnsCountBreakPoints={{ 350: 3, 750: 3, 900: 3 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Masonry columnsCount={3} gutter=\"15px\">\n\t\t\t\t\t\t\t{listItems.map((listItem) => (\n\t\t\t\t\t\t\t\t<Suspense\n\t\t\t\t\t\t\t\t\tkey={listItem.id}\n\t\t\t\t\t\t\t\t\tfallback={<Skeleton animation=\"wave\" />}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ImageComponent src={listItem.post_meta.social_post_image} />\n\t\t\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Masonry>\n\t\t\t\t\t</ResponsiveMasonry>\n\t\t\t\t\t{isFetching && <p>Loading...</p>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default List;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}